// <auto-generated />
using System;
using DoAnCuoiKy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoAnCuoiKy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306074223_capnhatbookitem")]
    partial class capnhatbookitem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("BookChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearPublished")
                        .HasColumnType("int");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookChapterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bookCategories");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleChapter")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bookChapters");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("BookCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("BookStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Publisher")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearPublished")
                        .HasColumnType("int");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookCategoryId");

                    b.HasIndex("BookChapterId");

                    b.HasIndex("BookId");

                    b.ToTable("bookItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookItemId");

                    b.HasIndex("UserId");

                    b.ToTable("bookReservations");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("borrowings");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BorrowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookItemId");

                    b.HasIndex("BorrowingId");

                    b.ToTable("borrowingDetails");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Fine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("BorrowingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("fineReason")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("fines");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("librarians");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(526)
                        .HasColumnType("nvarchar(526)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LibrarianRole", b =>
                {
                    b.Property<Guid>("librariansId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("rolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("librariansId", "rolesId");

                    b.HasIndex("rolesId");

                    b.ToTable("LibrarianRoles", (string)null);
                });

            modelBuilder.Entity("RoleUsers", b =>
                {
                    b.Property<Guid>("rolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("usersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("rolesId", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", "BookChapter")
                        .WithMany("books")
                        .HasForeignKey("BookChapterId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", "Category")
                        .WithMany("books")
                        .HasForeignKey("CategoryId");

                    b.Navigation("BookChapter");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", "Category")
                        .WithMany()
                        .HasForeignKey("BookCategoryId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", "BookChapter")
                        .WithMany("bookItems")
                        .HasForeignKey("BookChapterId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", "Book")
                        .WithMany("bookItems")
                        .HasForeignKey("BookId");

                    b.Navigation("Book");

                    b.Navigation("BookChapter");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookReservation", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", "BookItem")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookItemId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Users", "users")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.Navigation("BookItem");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Users", "users")
                        .WithMany("borrowings")
                        .HasForeignKey("UserId");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", "bookItem")
                        .WithMany("borrowingDetails")
                        .HasForeignKey("BookItemId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", "borrowing")
                        .WithMany("borrowingDetails")
                        .HasForeignKey("BorrowingId");

                    b.Navigation("bookItem");

                    b.Navigation("borrowing");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Fine", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", "borrowingDetail")
                        .WithMany("fines")
                        .HasForeignKey("BorrowingDetailId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Users", "users")
                        .WithMany("fines")
                        .HasForeignKey("UserId");

                    b.Navigation("borrowingDetail");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibrarianRole", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", null)
                        .WithMany()
                        .HasForeignKey("librariansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Role", null)
                        .WithMany()
                        .HasForeignKey("rolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUsers", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Role", null)
                        .WithMany()
                        .HasForeignKey("rolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Users", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.Navigation("bookItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", b =>
                {
                    b.Navigation("bookItems");

                    b.Navigation("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.Navigation("BookReservations");

                    b.Navigation("borrowingDetails");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.Navigation("borrowingDetails");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.Navigation("fines");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Users", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("borrowings");

                    b.Navigation("fines");
                });
#pragma warning restore 612, 618
        }
    }
}
