// <auto-generated />
using System;
using DoAnCuoiKy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoAnCuoiKy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearPublished")
                        .HasColumnType("int");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookAuthorId");

                    b.HasIndex("BookChapterId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bookAuthors");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("bookCartItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bookCategories");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleChapter")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bookChapters");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublicIdFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PublicIdImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("bookFileType")
                        .HasMaxLength(20)
                        .HasColumnType("tinyint");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("bookFiles");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("BookStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ShelfSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ShelfSectionId");

                    b.ToTable("bookItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookPickupSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPickedUp")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingId")
                        .IsUnique();

                    b.ToTable("bookPickupSchedules");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("usersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookItemId");

                    b.HasIndex("usersId");

                    b.ToTable("bookReservations");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("BorrowingStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LibrarianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isScheduled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LibrarianId");

                    b.ToTable("borrowings");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BorrowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("bookStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookItemId");

                    b.HasIndex("BorrowingId");

                    b.ToTable("borrowingDetails");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Fine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("BorrowingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibrarianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("fineReason")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingDetailId");

                    b.HasIndex("LibrarianId");

                    b.ToTable("fines");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookExportTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ExportReason")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("TransactionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingDetailId");

                    b.ToTable("bookExportTransactions");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookImportTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<byte>("TransactionType")
                        .HasColumnType("tinyint");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("bookImportTransactions");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookShelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookShelfName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfShelves")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("bookShelves");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FloorName")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxBookShelfCapity")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookshelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfSections")
                        .HasColumnType("int");

                    b.Property<string>("ShelfName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookshelfId");

                    b.ToTable("shelves");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.ShelfSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SectionName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShelfId");

                    b.ToTable("shelfSections");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PublisherName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Notification.NotificationToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingId");

                    b.HasIndex("UserId");

                    b.ToTable("notificationToUsers");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isValidate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("librarians");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookAuthor", "BookAuthor")
                        .WithMany("books")
                        .HasForeignKey("BookAuthorId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", "BookChapter")
                        .WithMany("books")
                        .HasForeignKey("BookChapterId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", "Category")
                        .WithMany("books")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId");

                    b.Navigation("BookAuthor");

                    b.Navigation("BookChapter");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCartItem", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", "BookItem")
                        .WithOne("BookCartItem")
                        .HasForeignKey("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCartItem", "BookItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", "User")
                        .WithMany("bookCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookFile", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", "book")
                        .WithMany("bookFiles")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", "Book")
                        .WithMany("bookItems")
                        .HasForeignKey("BookId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.ShelfSection", "ShelfSection")
                        .WithMany("BookItems")
                        .HasForeignKey("ShelfSectionId");

                    b.Navigation("Book");

                    b.Navigation("ShelfSection");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookPickupSchedule", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", "borrowing")
                        .WithOne("BookPickupSchedule")
                        .HasForeignKey("DoAnCuoiKy.Model.Entities.InformationLibrary.BookPickupSchedule", "BorrowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrowing");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookReservation", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", "BookItem")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookItemId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Users", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("BookItem");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", "Librarian")
                        .WithMany("borrowings")
                        .HasForeignKey("LibrarianId");

                    b.Navigation("Librarian");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", "bookItem")
                        .WithMany("borrowingDetails")
                        .HasForeignKey("BookItemId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", "borrowing")
                        .WithMany("borrowingDetails")
                        .HasForeignKey("BorrowingId");

                    b.Navigation("bookItem");

                    b.Navigation("borrowing");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Fine", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", "borrowingDetail")
                        .WithMany("fines")
                        .HasForeignKey("BorrowingDetailId");

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", "librarian")
                        .WithMany("fines")
                        .HasForeignKey("LibrarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrowingDetail");

                    b.Navigation("librarian");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookExportTransaction", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", "BorrowingDetail")
                        .WithMany("bookExportTransactions")
                        .HasForeignKey("BorrowingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowingDetail");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookImportTransaction", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", "book")
                        .WithMany("ImportTransactions")
                        .HasForeignKey("BookId");

                    b.Navigation("book");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookShelf", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Room", "Room")
                        .WithMany("BookShelves")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Room", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Shelf", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookShelf", "Bookshelf")
                        .WithMany("Shelves")
                        .HasForeignKey("BookshelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookshelf");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.ShelfSection", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Shelf", "Shelf")
                        .WithMany("Sections")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Notification.NotificationToUser", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", "borrowing")
                        .WithMany("notificationToUsers")
                        .HasForeignKey("BorrowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", "librarian")
                        .WithMany("notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrowing");

                    b.Navigation("librarian");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Role", "Role")
                        .WithMany("librarians")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Users", b =>
                {
                    b.HasOne("DoAnCuoiKy.Model.Entities.Usermanage.Role", "Role")
                        .WithMany("users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Book", b =>
                {
                    b.Navigation("ImportTransactions");

                    b.Navigation("bookFiles");

                    b.Navigation("bookItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookAuthor", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookCategory", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookChapter", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BookItem", b =>
                {
                    b.Navigation("BookCartItem")
                        .IsRequired();

                    b.Navigation("BookReservations");

                    b.Navigation("borrowingDetails");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Borrowing", b =>
                {
                    b.Navigation("BookPickupSchedule");

                    b.Navigation("borrowingDetails");

                    b.Navigation("notificationToUsers");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.BorrowingDetail", b =>
                {
                    b.Navigation("bookExportTransactions");

                    b.Navigation("fines");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.BookShelf", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Room", b =>
                {
                    b.Navigation("BookShelves");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.Shelf", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Kho.ShelfSection", b =>
                {
                    b.Navigation("BookItems");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.InformationLibrary.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Librarian", b =>
                {
                    b.Navigation("bookCartItems");

                    b.Navigation("borrowings");

                    b.Navigation("fines");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("DoAnCuoiKy.Model.Entities.Usermanage.Role", b =>
                {
                    b.Navigation("librarians");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
